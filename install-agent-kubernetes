#!/bin/bash

# Installer for Sysdig Agent on a kubernetes setup with kubectl already installed.

set -e

function check_commands_installed {
	if ! hash curl > /dev/null 2>&1; then
		echo "* curl is not installed on this host. Install curl and retry."
		exit 1
	fi

	if ! hash kubectl > /dev/null 2>&1; then
		echo "* kubectl is not installed on this host. Install kubectl and retry."
		exit 1
	fi

	if [ $OPENSHIFT -eq 1 ]; then
		if ! hash oc > /dev/null 2>&1; then
			echo "* oc is not installed on this host. Install oc and retry."
			exit 1
		fi
	fi
}

function download_yamls {
	WORKDIR=$(mktemp -d /tmp/sysdig-agent-k8s.XXXXXX)
	echo "* Downloading yamls files to the temp directory: $WORKDIR"
	echo "* Downloading Sysdig cluster role yaml"
	curl -s -o $WORKDIR/sysdig-agent-clusterrole.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-agent-clusterrole.yaml
	echo "* Downloading Sysdig config map yaml"
	curl -s -o $WORKDIR/sysdig-agent-configmap.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-agent-configmap.yaml
	echo "* Downloading Sysdig daemonset v2 yaml"
	curl -s -o $WORKDIR/sysdig-agent-daemonset-v2.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-agent-daemonset-v2.yaml
	echo "* Downloading Sysdig daemonset slim v2 yaml"
	curl -s -o $WORKDIR/sysdig-agent-slim-daemonset-v2.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-agent-slim-daemonset-v2.yaml
	if [ $INSTALL_ANALYZER -eq 1 ]; then
		echo "* Downloading Sysdig Image Analyzer config map yaml"
		curl -H 'Cache-Control: no-cache' -s -o $WORKDIR/sysdig-image-analyzer-configmap.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-image-analyzer-configmap.yaml
		echo "* Downloading Sysdig Image Analyzer daemonset v1 yaml"
		curl -H 'Cache-Control: no-cache' -s -o $WORKDIR/sysdig-image-analyzer-daemonset.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-image-analyzer-daemonset.yaml
    fi
}

function unsupported {
	echo "Unsupported operating system. Try using the the manual installation instructions"
	exit 1
}

function help {
	echo "Usage: $(basename ${0}) [-a | --access_key <value>] [-t | --tags <value>] [-c | --collector <value>] \ "
	echo "                [-cp | --collector_port <value>] [-s | --secure <value>] [-cc | --check_certificate <value>] \ "
	echo "                [-ns | --namespace | --project <value>] [-ac | --additional_conf <value>] \ "
	echo "                [-op | --openshift] [-as | --agent_slim] [-av | --agent_version <value>] \ "
	echo "                [-ia | --imageanalyzer ] [-am | --analysismanager <value>] [-ds | --dockersocket <value>] [-cs | --crisocket <value>] [-cv | --customvolume <value>] \ "
	echo "                [-cn | --cluster_name <value>] [-r | --remove ] [-h | --help]"
	echo ""
	echo " -a  : secret access key, as shown in Sysdig Monitor"
	echo " -t  : list of tags for this host (e.g. \"role:webserver,location:europe\", \"role:webserver\" or \"webserver\")"
	echo " -c  : collector IP for Sysdig Monitor"
	echo " -cp : collector port (default: 6443)"
	echo " -s  : use a secure SSL/TLS connection to send metrics to the collector (default: true)"
	echo " -cc : enable strong SSL certificate check (default: true)"
	echo " -ns : if provided, will be the namespace/project used to deploy the agent. (default: sysdig-agent)"
	echo " -op : if provided, perform the installation using the OpenShift command line"
	echo " -ac : if provided, the additional configuration will be appended to agent configuration file"
	echo " -av : if provided, use the agent-version specified. (default: latest)"
	echo " -r  : if provided, will remove the sysdig agent's daemonset, configmap, clusterrolebinding,"
	echo "       serviceacccount and secret from the specified namespace"
	echo " -am : Analysis Manager endpoint for Sysdig Secure"
	echo " -ds : docker socket for Image Analyzer"
	echo " -cs : CRI socket for Image Analyzer"
	echo " -cv : custom volume for Image Analyzer"
	echo " -ia : if not provided, will skip Image Analyzer installation"
	echo " -h  : print this usage and exit"
	echo
	exit 1
}

function is_valid_value {
	if [[ ${1} == -* ]] || [[ ${1} == --* ]] || [[ -z ${1} ]]; then
		return 1
	else
		return 0
	fi
}

function create_namespace {
	fail=0
	if [ $OPENSHIFT -eq 0 ]; then
		echo "* Creating namespace: $NAMESPACE"
		out=$(kubectl create namespace $NAMESPACE 2>&1) || { fail=1 && echo "kubectl create namespace failed!"; }
	else
		echo "* Creating project: $NAMESPACE"
		out=$(oc adm new-project $NAMESPACE --node-selector='app=sysdig-agent' 2>&1) || { fail=1 && echo "oc adm new-project failed!"; }
		# label all nodes
		oc label node --all "app=sysdig-agent"

		# Set the project to the namespace
		switch=$(oc project $NAMESPACE 2>&1)
	fi
	if [ $fail -eq 1 ]; then
		if [[ "$out" =~ "AlreadyExists" || "$out" =~ "already exists" ]]; then
			echo "$out. Continuing..."
		else
			echo "$out"
			exit 1
		fi
	fi
}

function create_sysdig_serviceaccount {
	fail=0
	if [ $OPENSHIFT -eq 0 ]; then
		echo "* Creating sysdig-agent serviceaccount in namespace: $NAMESPACE"
		out=$(kubectl create serviceaccount sysdig-agent --namespace=$NAMESPACE 2>&1) || { fail=1 && echo "kubectl create serviceaccount failed!"; }
	else
		echo "* Creating sysdig-agent serviceaccount in project: $NAMESPACE"
		out=$(oc create serviceaccount sysdig-agent -n $NAMESPACE 2>&1) || { fail=1 && echo "oc create serviceaccount failed!"; }
	fi
	if [ $fail -eq 1 ]; then
		if [[ "$out" =~ "AlreadyExists" || "$out" =~ "already exists" ]]; then
			echo "$out. Continuing..."
		else
			echo "$out"
			exit 1
		fi
	fi
}

function install_k8s_agent {

	fail=0
	if [ $OPENSHIFT -eq 0 ]; then
		echo "* Creating sysdig-agent clusterrole and binding"
		kubectl apply -f $WORKDIR/sysdig-agent-clusterrole.yaml
		outbinding=$(kubectl create clusterrolebinding sysdig-agent --clusterrole=sysdig-agent --serviceaccount=$NAMESPACE:sysdig-agent --namespace=$NAMESPACE 2>&1) || { fail=1 && echo "kubectl create clusterrolebinding failed!"; }
	else
		echo "* Creating sysdig-agent access policies"
		outbinding=$(oc adm policy add-scc-to-user privileged -n $NAMESPACE -z sysdig-agent 2>&1) || { fail=1 && echo "oc adm policy add-scc-to-user failed!"; }
		if [ $fail -eq 0 ]; then
			outbinding=$(oc adm policy add-cluster-role-to-user cluster-reader -n $NAMESPACE -z sysdig-agent 2>&1) || { fail=1 && echo "oc adm policy add-cluster-role-to-user failed!"; }
		fi
	fi
	if [ $fail -eq 1 ]; then
		if [[ "$outbinding" =~ "AlreadyExists" ]]; then
			echo "$outbinding. Continuing..."
		else
			echo "$outbinding"
			exit 1
		fi
	fi

	echo "* Creating sysdig-agent secret using the ACCESS_KEY provided"
	fail=0
	outsecret=$(kubectl create secret generic sysdig-agent --from-literal=access-key=$ACCESS_KEY --namespace=$NAMESPACE 2>&1) || { fail=1 && echo "kubectl create secret failed!"; }
	if [ $fail -eq 1 ]; then
		if [[ "$outsecret" =~ "AlreadyExists" ]]; then
			echo "$outsecret. Re-creating secret..."
			kubectl delete secrets sysdig-agent --namespace=$NAMESPACE 2>&1
			kubectl create secret generic sysdig-agent --from-literal=access-key=$ACCESS_KEY --namespace=$NAMESPACE 2>&1
		else
			echo "$outsecret"
			exit 1
		fi
	fi

	CONFIG_FILE=$WORKDIR/sysdig-agent-configmap.yaml

	if [ ! -z "$CLUSTER_NAME" ]; then
		echo "* Setting cluster name as $CLUSTER_NAME"
		echo "    k8s_cluster_name: $CLUSTER_NAME" >> $CONFIG_FILE
	fi

	echo "* Updating agent configmap and applying to cluster"
	if [ ! -z "$TAGS" ]; then
		echo "* Setting tags"
		echo "    tags: $TAGS" >> $CONFIG_FILE
	fi

	if [ ! -z "$COLLECTOR" ]; then
		echo "* Setting collector endpoint"
		echo "    collector: $COLLECTOR" >> $CONFIG_FILE
	fi

	if [ ! -z "$COLLECTOR_PORT" ]; then
		echo "* Setting collector port"
		echo "    collector_port: $COLLECTOR_PORT" >> $CONFIG_FILE
	else
		echo "    collector_port: 6443" >> $CONFIG_FILE
	fi

	if [ ! -z "$SECURE" ]; then
		echo "* Setting connection security"
		echo "    ssl: $SECURE" >> $CONFIG_FILE
	else
		echo "    ssl: true" >> $CONFIG_FILE
	fi

	if [ ! -z "$CHECK_CERT" ]; then
		echo "* Setting SSL certificate check level"
		echo "    ssl_verify_certificate: $CHECK_CERT" >> $CONFIG_FILE
	else
		echo "    ssl_verify_certificate: true" >> $CONFIG_FILE
	fi

	if [ ! -z "$ADDITIONAL_CONF" ]; then
		echo "* Adding additional configuration to dragent.yaml"
		echo -e "    $ADDITIONAL_CONF" >> $CONFIG_FILE
	fi

	#
	echo "    new_k8s: true" >> $CONFIG_FILE
	kubectl apply -f $CONFIG_FILE --namespace=$NAMESPACE

	if [ $INSTALL_ANALYZER -eq 1 ]; then
		# Image Analyzer config map
		IA_CONFIG_FILE=$WORKDIR/sysdig-image-analyzer-configmap.yaml
		
		if [ ! -z "$ANALYSIS_MANAGER" ]; then
			echo "* Setting Analysis Manager endpoint for Image Analyzer"
			echo "  collector_endpoint: $ANALYSIS_MANAGER" >> $IA_CONFIG_FILE
		fi
		if [ ! -z "$DOCKER_SOCKET_PATH" ]; then
			echo "* Setting docker socket path"
			echo "  docker_socket_path: $DOCKER_SOCKET_PATH" >> $IA_CONFIG_FILE
		fi
		if [ ! -z "$CRI_SOCKET_PATH" ]; then
			echo "* Setting CRI socket path"
			echo "  cri_socket_path: $CRI_SOCKET_PATH" >> $IA_CONFIG_FILE
		fi

		kubectl apply -f $IA_CONFIG_FILE --namespace=$NAMESPACE
    fi

	AGENT_STRING="agent"
	if [ ! -z "$AGENT_SLIM" ]; then
		DAEMONSET_FILE="$WORKDIR/sysdig-agent-slim-daemonset-v2.yaml"
		AGENT_STRING="agent-slim"
	else
		DAEMONSET_FILE="$WORKDIR/sysdig-agent-daemonset-v2.yaml"
	fi

	sed -i.bak -e "s|\( *image: \)sysdig/${AGENT_STRING}|\1sysdig/${AGENT_STRING}:${AGENT_VERSION}|g" $DAEMONSET_FILE

	# Test for COS (Container-Optimized OS from Google)
	# Enable EBPF if so.
	IS_COS_OS=$(kubectl get nodes -o wide | awk 'NR==2 {print $8}')

	if [ "$IS_COS_OS" == "Container-Optimized" ]; then
		# enable ebpf
		echo "COS os detected. Enabling eBPF"
		sed -i.bak -e "s|#env:|env:|" $DAEMONSET_FILE
		sed -i.bak -e "s|#  - name: SYSDIG_BPF_PROBE|  - name: SYSDIG_BPF_PROBE|" $DAEMONSET_FILE
		sed -i.bak -e "s|#    value: \"\"|    value: \"\"|" $DAEMONSET_FILE
        fi
	
	echo "* Deploying the sysdig agent"
	kubectl apply -f $DAEMONSET_FILE --namespace=$NAMESPACE

	echo -e "\nThe list of agent pods deployed in the namespace \"$NAMESPACE\" are:"
	kubectl get pods -n $NAMESPACE | grep "sysdig-agent"

	echo -e "\nMake sure the above pods all turn to \"Running\" state before continuing"
	echo "Should any pod not reach the \"Running\" state, further info can be obtained from logs as follows"
	echo "'kubectl logs <agent-pod-name> -n $NAMESPACE' "

	if [ $INSTALL_ANALYZER -eq 1 ]; then
		# Deploy Image Analyzer
		IA_FILE=$WORKDIR/sysdig-image-analyzer-daemonset.yaml
		if [ ! -z "$IA_CUSTOM_PATH" ]; then
			NL="\n"
			if [[ $uname -eq "Darwin" ]]; then
				NL=$'\\\n'
			fi

			IA_MATCH="Add custom volume here"
			IA_INSERT_VOLUME="      - name: custom-volume${NL}        hostPath:${NL}          path: ${IA_CUSTOM_PATH}"
			
			sed -i.bak -e "s|${IA_MATCH}|${IA_MATCH}${NL}${IA_INSERT_VOLUME}|" $IA_FILE

			IA_MATCH="Add custom volume mount here"
			IA_INSERT_VOLUME="        - mountPath: ${IA_CUSTOM_PATH}${NL}          name: custom-volume"

			sed -i.bak -e "s|${IA_MATCH}|${IA_MATCH}${NL}${IA_INSERT_VOLUME}|" $IA_FILE
		fi

		echo "* Deploying the Image Analyzer"
		kubectl apply -f $IA_FILE --namespace=$NAMESPACE

		echo -e "\nThe list of Image Analyzers pods deployed in the namespace \"$NAMESPACE\" are:"
		kubectl get pods -n $NAMESPACE | grep "image-analyzer"
	fi
}

function remove_agent {
	set +e

	echo "* Deleting the Sysdig agent and configurings from namespace $NAMESPACE"

	echo "* Deleting the sysdig-agent daemonset"
	kubectl delete daemonset sysdig-agent --namespace=$NAMESPACE

	echo "* Deleting the sysdig-agent configmap"
	kubectl delete configmap sysdig-agent --namespace=$NAMESPACE

	if [ "$(kubectl get pods -n $NAMESPACE | grep -c "image-analyzer")" -ge 1 ]; then 
		echo "* Deleting the sysdig-image-analyzer daemonset"
		kubectl delete daemonset sysdig-image-analyzer --namespace=$NAMESPACE

		echo "* Deleting the sysdig-image-analyzer configmap"
		kubectl delete configmap sysdig-image-analyzer --namespace=$NAMESPACE
    fi

	echo "* Deleting the sysdig-agent secret"
	kubectl delete secret sysdig-agent --namespace=$NAMESPACE

	if [ $OPENSHIFT -eq 0 ]; then
		echo "* Deleting the sysdig-agent clusterrolebinding"
		kubectl delete clusterrolebinding sysdig-agent

		echo "* Deleting the sysdig-agent clusterrole"
		kubectl delete clusterrole sysdig-agent
	else
		echo "* Deleting labels from oc nodes"
		oc label node --all app-
	fi

	echo "* Deleting the sysdig-agent serviceacccount"
	kubectl delete serviceaccount -n default sysdig-agent --namespace=$NAMESPACE

	echo "* Note, the namespace '$NAMESPACE' is not deleted. It could have other resources"

	set -e
}


if [[ ${#} -eq 0 ]]; then
	echo "ERROR: Sysdig Access Key argument is mandatory, use -h | --help for $(basename ${0}) Usage"
	exit 1
fi

# Setting the default value for NAMESPACE to be "sysdig-agent"
# Will be over-ridden if the -ns|--namespace|--project flag is provided
NAMESPACE="sysdig-agent"
REMOVE_AGENT=0
OPENSHIFT=0
INSTALL_ANALYZER=0
AGENT_VERSION="latest"
WORKDIR=""

# Get and validate all arguments
while [[ ${#} > 0 ]]
do
	key="${1}"

	case ${key} in
		-a|--access_key)
			if is_valid_value "${2}"; then
				ACCESS_KEY="${2}"
			else
				echo "ERROR: no value provided for access_key option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-t|--tags)
			if is_valid_value "${2}"; then
				TAGS="${2}"
			else
				echo "ERROR: no value provided for tags option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-c|--collector)
			if is_valid_value "${2}"; then
				COLLECTOR="${2}"
			else
				echo "ERROR: no value provided for collector endpoint option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-cp|--collector_port)
			if is_valid_value "${2}"; then
				COLLECTOR_PORT="${2}"
			else
				echo "ERROR: no value provided for collector port option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-s|--secure)
			if is_valid_value "${2}"; then
				SECURE="${2}"
			else
				echo "ERROR: no value provided for connection security option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-cc|--check_certificate)
			if is_valid_value "${2}"; then
				CHECK_CERT="${2}"
			else
				echo "ERROR: no value provided for SSL check certificate option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-ns|--namespace)
			if is_valid_value "${2}"; then
				NAMESPACE="${2}"
			else
				echo "ERROR: no value provided for namespace, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-ac|--additional_conf)
			if is_valid_value "${2}"; then
				ADDITIONAL_CONF="${2}"
			else
				echo "ERROR: no value provided for additional conf option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-av|--agent_version)
			if is_valid_value "${2}"; then
				AGENT_VERSION="${2}"
			else
				echo "ERROR: no value provided for agent version option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-cn|--cluster_name)
			if is_valid_value "${2}"; then
				CLUSTER_NAME="${2}"
			else
				echo "ERROR: no value provided for cluster name option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-am|--analysismanager)
			if is_valid_value "${2}"; then
				ANALYSIS_MANAGER="${2}"
			else
				echo "ERROR: no value provided for Analysis Manager option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-ds|--dockersocket)
			if is_valid_value "${2}"; then
				DOCKER_SOCKET_PATH="${2}"
			else
				echo "ERROR: no value provided for docker socket path option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-cs|--crisocket)
			if is_valid_value "${2}"; then
				CRI_SOCKET_PATH="${2}"
			else
				echo "ERROR: no value provided for CRI socket path option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-cv|--customvolume)
			if is_valid_value "${2}"; then
				IA_CUSTOM_PATH="${2}"
			else
				echo "ERROR: no value provided for custom volume path option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-as|--agent_slim)
			AGENT_SLIM=1
			;;
		-op|--openshift)
			OPENSHIFT=1
			;;
		-r|--remove)
			REMOVE_AGENT=1
			;;
		-ia|--imageanalyzer)
			INSTALL_ANALYZER=1
			;;
		-h|--help)
			help
			exit 1
			;;
		*)
			echo "ERROR: Invalid option: ${1}, use -h | --help for $(basename ${0}) Usage"
			exit 1
			;;
	esac
	shift
done

if [ $REMOVE_AGENT -eq 1 ]; then
	remove_agent
	exit 0
fi

if [ -z $ACCESS_KEY  ]; then
	echo "ERROR: Sysdig Access Key argument is mandatory, use -h | --help for $(basename ${0}) Usage"
	exit 1
fi

if [ -z $COLLECTOR ]; then
	echo "No collector argument provided. Using default value: collector.sysdigcloud.com"
fi

echo "* Detecting operating system"
# Error if it isn't a supported OS
ARCH=$(uname -m)
PLATFORM=$(uname)
if [[ ! $ARCH = *86 ]] && [ ! $ARCH = "x86_64" ] && [ ! $ARCH = "s390x" ]; then
	unsupported
fi

if [ -f /etc/debian_version ]; then
	if [ -f /etc/lsb-release ]; then
		. /etc/lsb-release
		DISTRO=$DISTRIB_ID
		VERSION=${DISTRIB_RELEASE%%.*}
	else
		DISTRO="Debian"
		VERSION=$(cat /etc/debian_version | cut -d'.' -f1)
	fi

	case "$DISTRO" in

		"Ubuntu")
			if [ $VERSION -ge 10 ]; then
				check_commands_installed
			else
				unsupported
			fi
			;;

		"LinuxMint")
			if [ $VERSION -ge 9 ]; then
				check_commands_installed
			else
				unsupported
			fi
			;;

		"Debian")
			if [ $VERSION -ge 6 ]; then
				check_commands_installed
			elif [[ $VERSION == *sid* ]]; then
				check_commands_installed
			else
				unsupported
			fi
			;;

		*)
			unsupported
			;;

	esac

elif [ -f /etc/system-release-cpe ]; then
	DISTRO=$(cat /etc/system-release-cpe | cut -d':' -f3)

	VERSION=$(cat /etc/system-release-cpe | cut -d':' -f5 | cut -d'.' -f1 | sed 's/[^0-9]*//g')

	case "$DISTRO" in

		"oracle" | "centos" | "redhat")
			if [ $VERSION -ge 6 ]; then
				check_commands_installed
			else
				unsupported
			fi
			;;

		"fedoraproject")
			if [ $VERSION -ge 13 ]; then
				check_commands_installed
			else
				unsupported
			fi
			;;

		*)
			unsupported
			;;
	esac

elif [[ $uname -eq "Darwin" ]]; then
	check_commands_installed
else
	unsupported
fi

download_yamls
create_namespace
create_sysdig_serviceaccount
install_k8s_agent
